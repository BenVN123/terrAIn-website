./frontend/node_modules/.cache/babel-loader/eb3fe640f11616eb005cfa07d2004218ec728c6201afaaea246b4a31683b8730.json:{"ast":null,"code":"var _process$env$REACT_AP;\nimport { io } from 'socket.io-client';\nconst SOCKET_URL = ((_process$env$REACT_AP = process.env.REACT_APP_API_URL) === null || _process$env$REACT_AP === void 0 ? void 0 : _process$env$REACT_AP.replace('/api', '')) || 'http://localhost:5001';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.listeners = new Map();\n  }\n  connect() {\n    if (this.socket) return;\n    this.socket = io(SOCKET_URL, {\n      transports: ['websocket'],\n      reconnection: true,\n      reconnectionAttempts: 10,\n      reconnectionDelay: 2000\n    });\n    this.socket.on('connect', () => {\n      console.log('WebSocket connected');\n    });\n    this.socket.on('disconnect', () => {\n      console.log('WebSocket disconnected');\n    });\n    this.socket.on('error', error => {\n      console.error('WebSocket error:', error);\n    });\n\n    // Set up listeners for events we care about\n    this.setupEventListeners();\n  }\n  setupEventListeners() {\n    if (!this.socket) return;\n    const events = ['mqtt_message', 'sensors_temperature', 'sensors_distance', 'sensors_gnss'];\n    events.forEach(event => {\n      var _this$socket;\n      (_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.on(event, data => {\n        let parsedData;\n        try {\n          parsedData = typeof data === 'string' ? JSON.parse(data) : data;\n        } catch (e) {\n          parsedData = data;\n        }\n        console.log(`Received ${event} data:`, parsedData);\n\n        // Notify all listeners for this event\n        const eventListeners = this.listeners.get(event);\n        if (eventListeners) {\n          eventListeners.forEach(listener => listener(parsedData));\n        }\n      });\n    });\n\n    // Add connection event listeners for debugging\n    this.socket.on('connect', () => {\n      console.log('Socket.IO connected successfully!');\n    });\n    this.socket.on('connect_error', error => {\n      console.error('Socket.IO connection error:', error);\n    });\n    this.socket.on('connect_timeout', () => {\n      console.error('Socket.IO connection timeout');\n    });\n    this.socket.on('error', error => {\n      console.error('Socket.IO error:', error);\n    });\n  }\n  subscribe(event, callback) {\n    var _this$listeners$get;\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, new Set());\n    }\n    (_this$listeners$get = this.listeners.get(event)) === null || _this$listeners$get === void 0 ? void 0 : _this$listeners$get.add(callback);\n\n    // Make sure we're connected\n    if (!this.socket || !this.socket.connected) {\n      this.connect();\n    }\n\n    // Return unsubscribe function\n    return () => {\n      const eventListeners = this.listeners.get(event);\n      if (eventListeners) {\n        eventListeners.delete(callback);\n        if (eventListeners.size === 0) {\n          this.listeners.delete(event);\n        }\n      }\n    };\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.listeners.clear();\n    }\n  }\n}\nexport const socketService = new SocketService();\nexport default socketService;","map":{"version":3,"names":["io","SOCKET_URL","_process$env$REACT_AP","process","env","REACT_APP_API_URL","replace","SocketService","constructor","socket","listeners","Map","connect","transports","reconnection","reconnectionAttempts","reconnectionDelay","on","console","log","error","setupEventListeners","events","forEach","event","_this$socket","data","parsedData","JSON","parse","e","eventListeners","get","listener","subscribe","callback","_this$listeners$get","has","set","Set","add","connected","delete","size","disconnect","clear","socketService"],"sources":["/home/andy/programm/hackathons/terrAIn-website/frontend/src/services/socket.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\n\nconst SOCKET_URL = process.env.REACT_APP_API_URL?.replace('/api', '') || 'http://localhost:5001';\n\nclass SocketService {\n  private socket: Socket | null = null;\n  private listeners: Map<string, Set<(data: any) => void>> = new Map();\n\n  connect() {\n    if (this.socket) return;\n\n    this.socket = io(SOCKET_URL, {\n      transports: ['websocket'],\n      reconnection: true,\n      reconnectionAttempts: 10,\n      reconnectionDelay: 2000,\n    });\n\n    this.socket.on('connect', () => {\n      console.log('WebSocket connected');\n    });\n\n    this.socket.on('disconnect', () => {\n      console.log('WebSocket disconnected');\n    });\n\n    this.socket.on('error', (error) => {\n      console.error('WebSocket error:', error);\n    });\n\n    // Set up listeners for events we care about\n    this.setupEventListeners();\n  }\n\n  private setupEventListeners() {\n    if (!this.socket) return;\n\n    const events = ['mqtt_message', 'sensors_temperature', 'sensors_distance', 'sensors_gnss'];\n\n    events.forEach(event => {\n      this.socket?.on(event, (data: any) => {\n        let parsedData: any;\n        try {\n          parsedData = typeof data === 'string' ? JSON.parse(data) : data;\n        } catch (e) {\n          parsedData = data;\n        }\n\n        console.log(`Received ${event} data:`, parsedData);\n\n        // Notify all listeners for this event\n        const eventListeners = this.listeners.get(event);\n        if (eventListeners) {\n          eventListeners.forEach(listener => listener(parsedData));\n        }\n      });\n    });\n\n    // Add connection event listeners for debugging\n    this.socket.on('connect', () => {\n      console.log('Socket.IO connected successfully!');\n    });\n\n    this.socket.on('connect_error', (error) => {\n      console.error('Socket.IO connection error:', error);\n    });\n\n    this.socket.on('connect_timeout', () => {\n      console.error('Socket.IO connection timeout');\n    });\n\n    this.socket.on('error', (error) => {\n      console.error('Socket.IO error:', error);\n    });\n  }\n\n  subscribe(event: string, callback: (data: any) => void) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, new Set());\n    }\n    \n    this.listeners.get(event)?.add(callback);\n\n    // Make sure we're connected\n    if (!this.socket || !this.socket.connected) {\n      this.connect();\n    }\n\n    // Return unsubscribe function\n    return () => {\n      const eventListeners = this.listeners.get(event);\n      if (eventListeners) {\n        eventListeners.delete(callback);\n        if (eventListeners.size === 0) {\n          this.listeners.delete(event);\n        }\n      }\n    };\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.listeners.clear();\n    }\n  }\n}\n\nexport const socketService = new SocketService();\nexport default socketService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
